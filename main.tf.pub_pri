provider "aws" {
  profile       = "default"
  region        = "ap-southeast-2"
}

#
# Local values
#
locals {
  all_traffic = "0.0.0.0/0"
  # docker installed
  # ami-020d764f9372da231
  ami = "ami-020d764f9372da231"
  instance_type = "t2.micro"
  key_name = "TomKeyPair"
  common_tags = {
    Name = "tf-tom"
  }
}

#
# Variables
#

variable "cidr_block" {
  type = object({
    vpc 		= string
    public_subnet 	= string
    private_subnet 	= string
  })

  default	= {
    vpc = "10.0.0.0/16"
    public_subnet	= "10.0.3.0/24"
    private_subnet	= "10.0.4.0/24" 
  }
}

#
# VPC resources
#
resource "aws_vpc" "tf_demo" {
  cidr_block           = var.cidr_block["vpc"]
  tags = local.common_tags 
}

#
# Subnet resources
#
resource "aws_subnet" "tf_demo_pub" {
  vpc_id	= aws_vpc.tf_demo.id
  cidr_block	= var.cidr_block["public_subnet"]
  map_public_ip_on_launch = true
  tags = local.common_tags
}

resource "aws_subnet" "tf_demo_pri" {
  vpc_id        = aws_vpc.tf_demo.id
  cidr_block    = var.cidr_block["private_subnet"]
  tags = local.common_tags
}

#
# Internet gateway resources
#
resource "aws_internet_gateway" "tf_demo" {
  # attached to aws_vpc.tf_demo
  vpc_id = aws_vpc.tf_demo.id
  tags = local.common_tags
}

#
# NAT gateway
#

resource "aws_eip" "tf_demo" {
  vpc	= true
  tags	= local.common_tags
}

resource "aws_nat_gateway" "tf_demo" {
  allocation_id	= aws_eip.tf_demo.id
  subnet_id	= aws_subnet.tf_demo_pub.id
  tags		= local.common_tags
}

#
# VPC routing table resources
#
resource "aws_route_table" "tf_demo_cust" {
  vpc_id = aws_vpc.tf_demo.id

  route {
    cidr_block = local.all_traffic
    gateway_id = aws_internet_gateway.tf_demo.id
  }
  tags = local.common_tags
}

resource "aws_route_table_association" "tf_demo" {
  subnet_id      = aws_subnet.tf_demo_pub.id
  route_table_id = aws_route_table.tf_demo_cust.id
}

resource "aws_route_table" "tf_demo_main" {
  vpc_id = aws_vpc.tf_demo.id

  route {
    cidr_block = local.all_traffic
    gateway_id = aws_nat_gateway.tf_demo.id
  }
  tags = local.common_tags
}

resource "aws_main_route_table_association" "tf_demo" {
  vpc_id         = aws_vpc.tf_demo.id
  route_table_id = aws_route_table.tf_demo_main.id
}

#
# Security group resources
#
resource "aws_security_group" "tf_demo_ec2" {
  vpc_id      = aws_vpc.tf_demo.id

  ingress {
    from_port	= 22
    to_port	= 22
    protocol	= "tcp"
    cidr_blocks	= [local.all_traffic]
  }
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = [local.all_traffic]
  }

  tags = local.common_tags
}

#
# EC2 instance resources
#
resource "aws_instance" "tf_demo_pub" {
  ami = local.ami
  instance_type		= local.instance_type
  subnet_id		= aws_subnet.tf_demo_pub.id
  key_name		= local.key_name
  security_groups	= [
    aws_security_group.tf_demo_ec2.id
  ]
  tags = local.common_tags
}

resource "aws_instance" "tf_demo_pri" {
  ami = local.ami
  instance_type         = local.instance_type
  subnet_id             = aws_subnet.tf_demo_pri.id
  key_name              = local.key_name
  security_groups       = [
    aws_security_group.tf_demo_ec2.id
  ]
  tags = local.common_tags
}
